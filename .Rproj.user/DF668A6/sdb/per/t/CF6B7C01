{
    "collab_server" : "",
    "contents" : "\n# TODO\n   # incorporate body size element... ?? \n\n\n##########\n# CLEAR WORKSPACE\n##########\n\nrm(list=ls()) \n\n##########\n# LOAD PACKAGES\n##########\n\nlibrary(R2jags)\nlibrary(runjags)\nlibrary(coda)\nlibrary(plyr)\nlibrary(sp)\nlibrary(raster)\nlibrary(rgeos)\n#library(secr)\nlibrary(geoR)\nlibrary(spatstat)\nlibrary(rgdal)\nlibrary(Hmisc)\nlibrary(abind)\nlibrary(lubridate)\n\n########\n# LOAD FUNCTIONS\n########\n\nLongLatToUTM<-function(xy){     # zone\n  xy2 <- data.frame(ID = 1:nrow(xy), X = xy[,1], Y = xy[,2])\n  sub <- !is.na(xy2$X)\n  out <- is.na(xy2$X)\n  xy3 <- xy2[sub,]\n  if(nrow(xy3)>0){\n    coordinates(xy3) <- c(\"X\", \"Y\")\n    proj4string(xy3) <- CRS(\"+proj=longlat +datum=WGS84\")  ## for example\n    res <- spTransform(xy3, CRS(\"+proj=utm +zone=11 +ellps=GRS80 +datum=NAD83 +units=m +no_defs\"))\n  }else{\n    res=xy3\n  }\n  df <- xy2\n  df[sub,] <- as.data.frame(res)\n  return(df)\n}\n\n# ConvertToHabmat<-function(xy,oldxlim,oldylim,nrow,ncol){     # zone\n#   \n#   return(df)\n# }\n\n########\n# READ IN DATA\n########\n\nallcaps<-read.csv(\"allcaptures.csv\",stringsAsFactors = F,na.strings = c(\"NA\",\"<NA>\",\"n/a\"))\nSurveys<-read.csv(\"SurveyMetadata2.csv\",stringsAsFactors = F,na.strings = c(\"NA\",\"<NA>\",\"n/a\",\"\"))\nnames(allcaps)\nnames(Surveys)\n\nhead(allcaps)\nhead(Surveys)\n\ntail(Surveys)\n\nkeep <- !is.na(Surveys$Date)\n\nSurveys <- Surveys[keep,]\n\n\nnames(Surveys)\n\nSurveys$Date2 <- mdy(Surveys$Date)\n\nallcaps[which(allcaps$ID==c(\"42\")),\"ID\"] <- \"PH42\"\n\nallcaps <- allcaps[!is.na(allcaps$Occasion),]     # remove observations with no occasion\n\n   ### remove spatial outliers that should not really be part of the study (not really in surveyed area)\n\n## site 7\n   ##  1036 1037 1130 1197 1212\n\nremove_site7 <- c(1036,1037,1130,1197,1212)\nallcaps <- allcaps[-remove_site7,]\n\n\n\n#######\n# DATA PROCESSING\n#######\n\nallcaps$Occasion <- as.character(allcaps$Occasion)\n\nsite_data <- list()     # set up the main data storage structure for site-level data\n\n   # ensure a common naming convention for sites\nuniquesites <- unique(Surveys$Site)[!is.na(unique(Surveys$Site))]    # 9 unique sites\nnuniquesites <- length(uniquesites)\nnewnames <- c(\"DH\",\"DI\",\"I-10\",\"ME\",\"MI\",\"MV\",\"SG\",\"WW\",\"PH\")\nsitenames_df <- data.frame(oldnames=uniquesites,newnames=newnames,stringsAsFactors = FALSE)\n\n## number of sites and periods\n\nglobal_vars <- list()\nglobal_vars$nsites <- 9\nglobal_vars$n_primary_occasions <- 10\nglobal_vars$nperiods <- numeric(global_vars$nsites)\n\n## control for data augmentation\n\nglobal_vars$naug <-  c(200,200,200,200,200,200,300,200,200)   # c(200,150,200,200,200,200,300,200,200) #  \n\nglobal_vars$max_naug <- max(global_vars$naug)\n\nglobal_vars$n_secondary_occasions <- max(Surveys$Session,na.rm=T)\nglobal_vars$primary_occasions <- c(1:global_vars$n_primary_occasions)\nglobal_vars$secondary_occasions <- c(1:global_vars$n_secondary_occasions)\n\nglobal_vars$occasion_names <- paste(rep(global_vars$primary_occasions,each=global_vars$n_secondary_occasions),rep(global_vars$secondary_occasions,times=global_vars$n_primary_occasions),sep=\"\")\n\noccasion_df <- data.frame(\n  Occasion = as.character(global_vars$occasion_names),\n  Period = rep(global_vars$primary_occasions,each=global_vars$n_secondary_occasions),\n  Replicate = rep(global_vars$secondary_occasions,times=global_vars$n_primary_occasions),\n  stringsAsFactors = F\n)\n\noccasion_df$Occasion\n\n## first beadmarked\n\nglobal_vars$first.beadmarked <- 4\n\n\n## define the periods\n\nglobal_vars$period_names <- c(\"July 2013\",\"August 2013\",\"March 2014\",\"June 2014\",\"June 2014\",\"July 2014\",\"August 2014\",\"March 2015\",\"May 2015\",\"June 2015\")\nglobal_vars$intervals <- c(12,222,78,26,27,21,209,64,31)/30   # in months\n\n## first sampling period\n\n\nglobal_vars$firstdate <- min(Surveys$Date2)+days(5)\n\n\nglobal_vars$realdates <- global_vars$firstdate + days(cumsum(c(0,12,222,78,26,27,21,209,64,31)))\n\ni=7\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  site2 <- sitenames_df$oldnames[sitenames_df$newnames==site]\n  temp <- subset(Surveys,Site==site2)\n  site_data[[site]] <- list()\n  site_data[[site]]$periods_surveyed <- unique(temp$Period) \n  site_data[[site]]$nperiods <- length(site_data[[site]]$periods_surveyed)\n  global_vars$nperiods[i] <- site_data[[site]]$nperiods\n  \n  site_data[[site]]$replicate_sessions <- numeric(global_vars$n_primary_occasions)\n  times_surveyed <- table(temp$Period)\n  site_data[[site]]$replicate_sessions[as.numeric(names(times_surveyed))] <- as.numeric(times_surveyed)\n  j=1\n  site_data[[site]]$surveyeffort <- rep(NA,times=global_vars$n_primary_occasions)\n  \n  temp2 <- tapply(temp$SurveyTime*temp$X..surveyors,temp$Period,sum)         # survey effort\n  temp2[which(is.na(temp2))] <- mean(temp2,na.rm=TRUE)\n  ndx <- as.numeric(names(temp2))\n  site_data[[site]]$surveyeffort[ndx] <- temp2\n  \n  site_data[[site]]$covsbysession <- list()\n  p=1\n  for(p in site_data[[site]]$periods_surveyed){\n    temp2 <- subset(temp,Period==p)\n    site_data[[site]]$covsbysession[[p]] <- list()\n    site_data[[site]]$covsbysession[[p]]$effort <- temp2$SurveyTime*temp2$X..surveyors\n    site_data[[site]]$covsbysession[[p]]$wind <- temp2$MaxWind\n    site_data[[site]]$covsbysession[[p]]$is.pm <- as.numeric(temp2$Type==\"PM\")\n    site_data[[site]]$covsbysession[[p]]$nsessions <- max(temp2$Session)\n  }\n  \n}\n\n\n#######\n# GET SIZE AND BODY CONDITION \n#######\n\n\n\n\n#######\n# GET XY COORDINATES FOR ALL INDIVIDUALS AT EACH SITE\n#######\n\ni=1\nfor(i in 1:nuniquesites){\n  site <- sitenames_df$newnames[i]\n  temp <- subset(allcaps,Site==site)\n  site_data[[site]]$capxy <- temp[,c(\"GPS.W\",\"GPS.N\")]\n \n  \n  #     # find outliers\n  # keep <- !is.na(site_data[[site]]$capxy$GPS.W)\n  # temp2 <- temp[keep,]\n  # temp3 <- temp2[chull(site_data[[site]]$capxy[keep,]),]\n  # \n  # plot(site_data[[site]]$capxy) \n  # text(temp3$GPS.W,temp3$GPS.N,labels=temp3$Lizard,col=\"red\",cex=2)\n  # \n  # temp3\n  # keep <- c(1,5)\n  # temp3 <- temp3[-keep,]\n  # to_remove <- which((allcaps$GPS.W%in%temp3$GPS.W)&(allcaps$GPS.N%in%temp3$GPS.N))\n  # \n    #   ## remove na from xy coords (not needed any more!)\n    # ndx <- !is.na(site_data[[site]]$capxy[,1])\n    # site_data[[site]]$capxy <- site_data[[site]]$capxy[ndx,]\n  site_data[[site]]$capxy <- LongLatToUTM(site_data[[site]]$capxy)[,c(\"X\",\"Y\")]\n    #temp <- temp[ndx,]\n  site_data[[site]]$uniqueinds <- unique(temp$ID)\n  site_data[[site]]$ind_locs <- list()\n  ind = site_data[[site]]$uniqueinds[31]\n  site_data[[site]]$init.locy <- numeric(length(site_data[[site]]$uniqueinds))\n  site_data[[site]]$init.locx <- numeric(length(site_data[[site]]$uniqueinds))\n  counter=1\n  for(ind in site_data[[site]]$uniqueinds){\n    temp2 <- subset(temp,ID==ind)\n    site_data[[site]]$ind_locs[[ind]] <- LongLatToUTM(temp2[,c(\"GPS.W\",\"GPS.N\")])[,c(\"X\",\"Y\")]\n    site_data[[site]]$ind_locs[[ind]]$periods <- occasion_df$Period[match(temp2$Occasion,occasion_df$Occasion)]\n    site_data[[site]]$ind_locs[[ind]]$replicates <- occasion_df$Replicate[match(temp2$Occasion,occasion_df$Occasion)]\n    site_data[[site]]$init.locx[counter] <- mean(site_data[[site]]$ind_locs[[ind]]$X[site_data[[site]]$ind_locs[[ind]]$periods==min(site_data[[site]]$ind_locs[[ind]]$periods)])\n    site_data[[site]]$init.locy[counter] <- mean(site_data[[site]]$ind_locs[[ind]]$Y[site_data[[site]]$ind_locs[[ind]]$periods==min(site_data[[site]]$ind_locs[[ind]]$periods)])\n    counter=counter+1\n  }\n}\n\nsite <- sitenames_df$newnames[1] \nplot(site_data[[site]]$capxy)\n\nsapply(site_data[[site]]$capxy,max)-sapply(site_data[[site]]$capxy,min)\n\nsite_data[[1]]$init.locx\nsite_data[[1]]$init.locy\n\n#######\n# GET SEX AND SVL FOR ALL INDIVIDUALS\n#######\n\n## SEX AND SVL\n\n# NOTE: SVL was generally only taken once, so we don't really get to see how it changes over time. Maybe not as important to include this in the model... \n    # look at subadults vs adults?  subadult: less than 46 mm SVL for males or 42 mm for females\n    # don't look at juveniles vs adults in the model- too much to consider the recruitment of juveniles and adults? Just do post-hoc analysis\n\ni=1\nfor(i in 1:nuniquesites){\n  site = sitenames_df$newnames[i]\n  temp = subset(allcaps,Site=site)\n  site_data[[site]]$sex <- character(length(site_data[[site]]$uniqueinds))\n  site_data[[site]]$is.male <- numeric(length(site_data[[site]]$uniqueinds))\n  site_data[[site]]$svl <- array(NA,dim=c(length(site_data[[site]]$uniqueinds),global_vars$n_primary_occasions))\n  site_data[[site]]$weight <- array(NA,dim=c(length(site_data[[site]]$uniqueinds),global_vars$n_primary_occasions))\n  site_data[[site]]$age <- array(NA,dim=c(length(site_data[[site]]$uniqueinds),global_vars$n_primary_occasions))\n  ind=site_data[[site]]$uniqueinds[1]\n  counter <- 1 \n  for(ind in site_data[[site]]$uniqueinds){\n    temp2 <- subset(temp,ID==ind)\n    sex <- names(which.max(table(temp2$Sex[temp2$Sex%in%c(\"m\",\"f\")])))\n    if(length(sex)>0){\n      allcaps$Sex[allcaps$ID==ind] <- sex\n    }else{\n      allcaps$Sex[allcaps$ID==ind] <- NA\n    }\n    site_data[[site]]$sex[counter] <- allcaps$Sex[allcaps$ID==ind][1]\n    site_data[[site]]$is.male[counter] <- ifelse(site_data[[site]]$sex[counter]==\"m\",1,0)\n    period=4\n    for(period in 1:global_vars$n_primary_occasions){\n      temp3 <- subset(temp2,Occasion%in%(occasion_df$Occasion[occasion_df$Period==period]))\n      if(nrow(temp3)>0){\n        if(any(!is.na(temp3$SVL))) site_data[[site]]$svl[counter,period] <- mean(temp3$SVL,na.rm=T)\n        if(any(!is.na(temp3$SVL))) site_data[[site]]$age[counter,period] <- ifelse(site_data[[site]]$svl[counter,period] < (site_data[[site]]$is.male[counter]*46 + (1-site_data[[site]]$is.male[counter])*42),1,2)\n        if(any(!is.na(temp3$Weight))) site_data[[site]]$weight[counter,period] <- mean(temp3$Weight,na.rm=T)\n      }\n    }\n    counter <- counter + 1\n  }\n}\n\n\n### Visualize locations of lizards within a study site\n\nsite <- sitenames_df$newnames[2] \nplot(site_data[[site]]$capxy)\n\n\n### NOTE: the plots don't seem perfectly rectangular. Maybe use MCP on the captures to define study site edges? \n\n#######\n# SET UP MCPs FOR EACH SURVEY SITE\n#######\n\ni=1\nfor(i in 1:nuniquesites){\n  site <- sitenames_df$newnames[i] \n  keep <- !is.na(site_data[[site]]$capxy$X)\n  capxy <- site_data[[site]]$capxy[keep,]\n  s<- chull(capxy[,2], capxy[,1])    # convex hull points\n  mcp<-capxy[c(s,s[1]),]\n  site_data[[site]]$mcp <- SpatialPolygons(list(Polygons(list(Polygon(mcp)), ID=1)))   #  sampled area\n  site_data[[site]]$mcp <- buffer(site_data[[site]]$mcp, width=2)   #  expand sampled area by a little...\n  site_data[[site]]$mcp.b <- buffer(site_data[[site]]$mcp, width=10)           # buffer around sampled area\n  site_data[[site]]$area <- site_data[[site]]$mcp.b@polygons[[1]]@area\n  \n  polygon <- site_data[[site]]$mcp.b\n  xy <- as.data.frame(polygon@polygons[[1]]@Polygons[[1]]@coords)\n  \n  site_data[[site]]$xlim <- c(min(xy$x),max(xy$x))\n  site_data[[site]]$ylim <- c(min(xy$y),max(xy$y))\n  \n  site_data[[site]]$area2 <- diff(site_data[[site]]$xlim)*diff(site_data[[site]]$ylim)\n  \n  \n  #Create a raster of cells inside our sampled area    CRS(\"+proj=utm +zone=11 +ellps=GRS80 +datum=NAD83 +units=m +no_defs\")\n  r <- raster(crs=CRS(\"+proj=utm +zone=11 +ellps=GRS80 +datum=NAD83 +units=m +no_defs\"))\n  extent(r) <- extent(site_data[[site]]$mcp.b)\n  res(r) <- c(2, 2)  #resolution of raster: 2m resolution seems good enough...\n  values(r) <- 1:ncell(r)\n  r <- raster::mask(r, site_data[[site]]$mcp)\n  values(r) <- ifelse(is.na(values(r)), 0, 1)\n  #raster::plot(r)\n  \n  site_data[[site]]$habraster <- r\n  \n  site_data[[site]]$habmat <- as.matrix(r)\n  xu <- ncol(r)\n  yu <- nrow(r)\n  \n  site_data[[site]]$xlim2 <- c(0,xu)\n  site_data[[site]]$ylim2 <- c(0,yu)\n  \n  #Convert location coordinates into \"habmat\" coordinates (rows and columns in habmat)\n  y <- ((site_data[[site]]$ylim[2]-site_data[[site]]$capxy$Y) /  diff(site_data[[site]]$ylim)) * yu\n  x <- ((site_data[[site]]$capxy$X-site_data[[site]]$xlim[1]) /  diff(site_data[[site]]$xlim)) * xu\n  site_data[[site]]$capxy2 <- data.frame(X=x,Y=y)\n  \n  # debug...\n  # convert <- trunc(site_data[[site]]$capxy2+1)\n  # site_data[[site]]$habmat[as.matrix(convert[,c(2,1)])]\n  \n}\n\n\n######################\n# VISUALIZE MCPs\n######################\n\n\nsite=1\nplot(site_data[[site]]$mcp)\nplot(site_data[[site]]$mcp.b)\npoints(site_data[[site]]$capxy)\n\nnames(site_data)\n\n\nmore <- 10\n\n\ngraphics.off()\npar(mfrow=c(2,3))\npar(mai=c(.7,.7,.1,.1))\n#par(ask=T)\nsite=1\nfor(site in 1:global_vars$nsites){\n  sitename = sitenames_df$newnames[site]\n  ext <- extent(site_data[[site]]$mcp.b)\n  plot(site_data[[site]]$capxy,\n       ylim=c(ext@ymin-more,ext@ymax+more),xlim=c(ext@xmin-more,ext@xmax+more),\n       xlab=\"\",ylab=\"\",main=\"\"\n  )\n  plot(site_data[[site]]$habraster,add=T,legend=F)\n  points(site_data[[site]]$capxy)\n  \n  \n  plot(ext,lwd=5,add=T)\n  legend(\"topleft\",cex=1.2,legend=sitename,bg=\"grey\")\n\n}\n\n\n\nsite=1\nhabrast <- raster(site_data[[site]]$habmat,xmn=site_data[[site]]$xlim2[1],xmx=site_data[[site]]$xlim2[2],ymn=site_data[[site]]$ylim2[1],ymx=site_data[[site]]$ylim2[2])\nplot(habrast)\ncap2 <- site_data[[site]]$capxy2\ncap2$Y <- site_data[[site]]$ylim2[2]-cap2$Y\npoints(cap2)\n\n\n#######\n# SET UP CAPTURE HISTORY MATRICES!\n#######\n\n\ni=1\nfor(i in 1:nuniquesites){\n  site = sitenames_df$newnames[i]\n  site_data[[site]]$caphist.std.2d <- array(0,dim=c(length(site_data[[site]]$uniqueinds),global_vars$n_primary_occasions))     # for storing the standard capture history \n  site_data[[site]]$caphist.std.3d <- array(0,dim=c(length(site_data[[site]]$uniqueinds),global_vars$n_primary_occasions,global_vars$n_secondary_occasions))    # for storing the standardy\n\n  site_data[[site]]$caplocationx.2d <- array(0,dim=c(length(site_data[[site]]$uniqueinds),global_vars$n_primary_occasions))     # for storing the standard capture history \n  site_data[[site]]$caplocationx.3d <- array(0,dim=c(length(site_data[[site]]$uniqueinds),global_vars$n_primary_occasions,global_vars$n_secondary_occasions)) \n \n  site_data[[site]]$caplocationy.2d <- array(0,dim=c(length(site_data[[site]]$uniqueinds),global_vars$n_primary_occasions))     # for storing the standard capture history \n  site_data[[site]]$caplocationy.3d <- array(0,dim=c(length(site_data[[site]]$uniqueinds),global_vars$n_primary_occasions,global_vars$n_secondary_occasions))\n     \n  site_data[[site]]$is.recap <- array(NA,dim=c(length(site_data[[site]]$uniqueinds),global_vars$n_primary_occasions))\n  \n  allcaps.thissite <- subset(allcaps,(Site==site))\n  \n  j=4\n  for(j in 1:global_vars$n_primary_occasions){\n    occasions <- occasion_df$Occasion[occasion_df$Period==j]\n    temp <- subset(allcaps,(Site==site)&(Occasion%in%occasions))\n      \n    uniqueids <- unique(temp$ID)      # individuals captured at this site on this period\n    nuniqueids <- length(uniqueids)\n        \n    if(nrow(temp)>0){\n      temp2 <- LongLatToUTM(temp[,c(\"GPS.W\",\"GPS.N\")])[,c(\"X\",\"Y\")]\n      temp$X <- temp2$X\n      temp$Y <- temp2$Y\n    }else{\n      temp$X <- numeric(0)\n      temp$Y <- numeric(0)\n    }\n    \n    capsbyoccasion <- table(temp$ID,temp$Occasion)\n    \n    ## assemble the capture histories\n    if(nrow(temp)>0){\n      k=1\n      for(k in 1:nuniqueids){\n        thisid <- uniqueids[k]\n        \n        idndx <- which(site_data[[site]]$uniqueinds==thisid)\n        \n        site_data[[site]]$caphist.std.2d[idndx,j] <- 1\n        \n        caplocs <- site_data[[site]]$ind_locs[[thisid]][site_data[[site]]$ind_locs[[thisid]]$periods==j,]\n        \n        if(nrow(caplocs)>0){\n          site_data[[site]]$caplocationx.2d[idndx,j] <- mean(caplocs$X,na.rm=T)\n          site_data[[site]]$caplocationy.2d[idndx,j] <- mean(caplocs$Y,na.rm=T)\n          site_data[[site]]$caplocationx.3d[idndx,j,caplocs$replicates] <- caplocs$X\n          site_data[[site]]$caplocationy.3d[idndx,j,caplocs$replicates] <- caplocs$Y\n        } \n        \n        sessions_detected <- occasion_df$Replicate[match(as.numeric(colnames(capsbyoccasion)),occasion_df$Occasion)][capsbyoccasion[thisid,]==1]\n            \n        site_data[[site]]$caphist.std.3d[idndx,j,sessions_detected] <- 1\n        \n        occasions_captured <- occasion_df$Period[occasion_df$Occasion%in%allcaps.thissite[allcaps.thissite$ID==uniqueids[k],]$Occasion]\n        \n        if(length(occasions_captured)>0){\n          site_data[[site]]$is.recap[idndx,j] <- ifelse(j>min(occasions_captured),1,0)\n        }\n        \n      }\n    }\n  }\n}\n\n\nsite=2\nsite_data[[site]]$caphist.std.2d\n\n\nsite_data[[site]]$sex\n\nsite_data[[site]]$is.recap\n\nsite_data[[site]]$caplocationy.2d\n\nsite_data[[3]]$caphist.std.2d\n\nsite_data[[3]]$caphist.std.3d[,,3]\n\n\n###############\n# CONSIDER SITE-LEVEL COVARIABLES\n###############\n\n\nsitecovars_df <- sitenames_df\n\n    ### Wind power: sites DI, ME, MV, and PH\nsitecovars_df$windpower <- c(0,1,0,1,0,1,0,0,1)\n\n   ### other disturbance\nsitecovars_df$disturbance_rank <- c(1,4,3,4,0,4,0,1,4)   # wind coded as 4?\n\nsitecovars_df$disturbance <- c(24.17,34.53,67.47,26.48,22.82,49.89,2.61,40.23,59.97)\n\nsitecovars_df$bareground <- c(82,90,72,76,63,87,84,75,85)\n\nsitecovars_df$noiselevel <- c(48.17,49.85,54.43,47.92,45.45,60.49,41.16,47.62,66.37)\n\nsitecovars_df$shrubdensity <- c(0.11,0.07,0.14,0.23,0.38,0.09,0.06,0.15,0.14)\n\nsitecovars_df$shrubcanopy <- c(18.92,12.83,19.81,12.97,27.50,3.88,2.95,17.43,13.00)\n\nsitecovars_df$shrubheight <- c(0.97,1.01,0.85,0.62,0.56,0.48,0.61,0.66,0.70)\n\nsitecovars_df$slope <- c(4.12,1.51,8.67,8.84,5.84,1.92,17.40,2.72,13.21)\n\nsitecovars_df$elevation <- c(500.99,318.03,390.74,711.98,640.74,366.12,822.73,468.75,464.42)\n\nsitecovars_df$rainfall <- c(10.82,6.57,11.81,18.43,13.86,15.26,16.95,13.99,13.42)\n\nsitecovars_df$avgwind <- c(2.58,6.84,13.13,8.40,3.64,10.15,3.80,5.65,8.25)\n\nsitecovars_df\n\n\n###############\n# DATA AUGMENTATION   [change to allow different augmentation for different sites!]\n###############\n\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i] \n  site_data[[site]]$caphist.std.3d.aug <- abind(site_data[[site]]$caphist.std.3d,array(0,dim=c((global_vars$naug[i]-length(site_data[[site]]$uniqueinds)),global_vars$n_primary_occasions,global_vars$n_secondary_occasions)),along=1)\n}\n\n\n###############\n# SET UP DATA FOR BUGS\n###############\n\n    ## master capture history matrix\n\ncaphist4d <- array(NA, dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions,global_vars$n_secondary_occasions))\ncaplocsx4d <- array(NA, dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions,global_vars$n_secondary_occasions))\ncaplocsy4d <- array(NA, dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions,global_vars$n_secondary_occasions))\n\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  j=5\n  for(j in 1:length(site_data[[site]]$periods_surveyed)){\n    this.period <- site_data[[site]]$periods_surveyed[j]\n       #ncaptures <- apply(site_data[[site]]$caphist.std.2d,2,sum)[this.period]\n    caphist4d[i,1:nrow(site_data[[site]]$caphist.std.2d),j,1:site_data[[site]]$replicate_sessions[this.period]] <- site_data[[site]]$caphist.std.3d[,this.period,1:site_data[[site]]$replicate_sessions[this.period]]\n    caphist4d[i,(nrow(site_data[[site]]$caphist.std.2d)+1):global_vars$naug[i],j,1:site_data[[site]]$replicate_sessions[this.period]] <- 0\n    \n    caplocsx4d[i,1:nrow(site_data[[site]]$caphist.std.2d),j,1:site_data[[site]]$replicate_sessions[this.period]] <- site_data[[site]]$caplocationx.3d[,this.period,1:site_data[[site]]$replicate_sessions[this.period]]\n    caplocsy4d[i,1:nrow(site_data[[site]]$caphist.std.2d),j,1:site_data[[site]]$replicate_sessions[this.period]] <- site_data[[site]]$caplocationy.3d[,this.period,1:site_data[[site]]$replicate_sessions[this.period]]\n  }\n}\n\ncaphist4d[1,2,,1]\n\ncaplocsy4d[1,2,,1]\n\n\ncaplocsx4d <- apply(caplocsx4d,c(1,2,3,4),function(t) ifelse(t==0,NA,t))\ncaplocsy4d <- apply(caplocsy4d,c(1,2,3,4),function(t) ifelse(t==0,NA,t))\n\ncaplocsy4d[1,2,,]\n\ncaplocsy4d[1,,1,1]\n\n\n\n## IS.MALE\n\nis.male <- array(NA,dim=c(global_vars$nsites,global_vars$max_naug))\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  is.male[i,1:length(site_data[[site]]$uniqueinds)] <- site_data[[site]]$is.male\n}\n\nis.male[2,]\n\n\n## INIT Z\n\ninit.z <- array(0,dim=c(global_vars$nsites,global_vars$max_naug))\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  init.z[i,1:length(site_data[[site]]$uniqueinds)] <- 1\n}\n\ninit.z[1,]\n\n\n## Matrix of sessions surveyed for each primary occasion\n\ntemp <- t(sapply(1:global_vars$nsites,function(t) site_data[[t]]$replicate_sessions,simplify = \"array\"))[,,drop=FALSE]\nsessions.surveyed <- t(apply(temp,1,function(t) c(t[which(t>0)],t[which(t==0)])))\n\n\n## SESSION COVARIATES\n\nis.pm <- array(NA,dim=c(global_vars$nsites,global_vars$n_primary_occasions,global_vars$n_secondary_occasions))\neffort <- array(NA,dim=c(global_vars$nsites,global_vars$n_primary_occasions,global_vars$n_secondary_occasions))\nwind <- array(NA,dim=c(global_vars$nsites,global_vars$n_primary_occasions,global_vars$n_secondary_occasions))\nsite_data[[1]]$covsbysession[[1]]$is.pm\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  j=4\n  for(j in 1:global_vars$nperiods[i]){\n    this.period <- site_data[[site]]$periods_surveyed[j]\n    is.pm[i,j,1:site_data[[site]]$covsbysession[[this.period]]$nsessions] <- site_data[[site]]$covsbysession[[this.period]]$is.pm\n    effort[i,j,1:site_data[[site]]$covsbysession[[this.period]]$nsessions] <- site_data[[site]]$covsbysession[[this.period]]$effort\n    wind[i,j,1:site_data[[site]]$covsbysession[[this.period]]$nsessions] <- site_data[[site]]$covsbysession[[this.period]]$wind\n  }\n}\n\n    \n    # Standardize!\n\neffort <- (effort-mean(effort,na.rm=T))/sd(effort,na.rm=T)\n\nwind <- (wind-mean(effort,na.rm=T))/sd(wind,na.rm=T)\n\n    # interpolate\n\neffort[which(is.na(effort),arr.ind = T)] <- 0\n\nwind[which(is.na(wind),arr.ind = T)] <- 0\n\nwind[2,,]\n\neffort[3,,]\n\n## FIRST SESSION WITH CAPTURES\n\n##firstsession[site,period,ind]\n\nfirstsession <- array(NA,dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions))\n\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  k=3\n  for(k in 1:global_vars$max_naug){\n    j=1  \n    for(j in 1:global_vars$nperiods[i]){\n      this.period <- site_data[[site]]$periods_surveyed[j]\n      temp <- caphist4d[i,k,j,]\n      if(sum(temp,na.rm=T)>0){\n        val <- which(temp>0)[1]\n      }else{\n        val <- 3\n      }\n      firstsession[i,k,j] <- val\n    }\n  }\n}\n\nfirstsession[2,,]\n\n##### Is beadmarked\n\nis.beadmarked <- array(0,dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions))\n#is.recap <- array(0,dim=c(global_vars$nsites,global_vars$naug,global_vars$n_primary_occasions))    \n\nbeadmark_mask <- is.beadmarked\nbeadmark_mask[,,(global_vars$first.beadmarked+1):global_vars$n_primary_occasions] <- 1\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  site_data[[site]]$firsts <- apply(site_data[[site]]$caphist.std.2d,1,function(t) min(which(t==1)))\n  \n  temp <- beadmark_mask[i,1:length(site_data[[site]]$uniqueinds),]*site_data[[site]]$caphist.std.2d\n  is.beadmarked[i,1:length(site_data[[site]]$uniqueinds),] <-  t(apply(temp,1,function(t) pmin(rep(1,length(t)),cumsum(t)) ))\n  \n}\n\nis.beadmarked[1,,]\n\n## INITIAL LOCATION!\n\ninit.location.x <- array(0,dim=c(global_vars$nsites,global_vars$max_naug))\ninit.location.y <- array(0,dim=c(global_vars$nsites,global_vars$max_naug))\n\n\ncaplocsx4d.init <- array(NA,dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions,global_vars$n_secondary_occasions))  #caplocsx4d\ncaplocsy4d.init <- array(NA,dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions,global_vars$n_secondary_occasions))  #caplocsy4d\n\ni=4\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  newpolygon <- gBuffer(site_data[[site]]$mcp, width=-10)\n  # plot(site_data[[site]]$mcp.b)\n  # plot(site_data[[site]]$mcp,add=T)\n  # plot(newpolygon,add=T)\n  init.location.x[i,1:length(site_data[[site]]$uniqueinds)] <- site_data[[site]]$init.locx\n  init.location.x[i,(length(site_data[[site]]$uniqueinds)+1):global_vars$max_naug] <- runif(length((length(site_data[[site]]$uniqueinds)+1):global_vars$max_naug),site_data[[site]]$xlim[1],site_data[[site]]$xlim[2])\n  init.location.y[i,1:length(site_data[[site]]$uniqueinds)] <- site_data[[site]]$init.locy\n  init.location.y[i,(length(site_data[[site]]$uniqueinds)+1):global_vars$max_naug] <- runif(length((length(site_data[[site]]$uniqueinds)+1):global_vars$max_naug),site_data[[site]]$ylim[1],site_data[[site]]$ylim[2])\n  isna <- is.na(init.location.x[i,])\n  if(any(isna)){\n    randpoints <- spsample(newpolygon,length(which(isna)),type=\"random\")\n    randx <- randpoints@coords[,1]\n    randy <- randpoints@coords[,2]\n    init.location.x[i,isna] <- randx #runif(1,site_data[[site]]$xlim[1],site_data[[site]]$xlim[2])\n    init.location.y[i,isna] <- randy #runif(1,site_data[[site]]$ylim[1],site_data[[site]]$ylim[2])\n  }\n       # now set up the initialization for the actual capture locations... \n  \n  ind=1\n  for(ind in 1:length(site_data[[site]]$uniqueinds)){\n    indiv <- site_data[[site]]$uniqueinds[ind]\n    for(p in 1:global_vars$n_primary_occasions){\n      isna <- is.na(caplocsx4d[i,ind,p,])\n      if(any(!isna)){\n        if(any(isna)){ \n          caplocsx4d.init[i,ind,p,isna]<- mean(caplocsx4d[i,ind,p,!isna])\n          caplocsy4d.init[i,ind,p,isna]<- mean(caplocsy4d[i,ind,p,!isna])\n        }\n      } else{\n        caplocsx4d.init[i,ind,p,] <- mean(site_data[[site]]$ind_locs[[ind]]$X,na.rm=T)\n        caplocsy4d.init[i,ind,p,] <- mean(site_data[[site]]$ind_locs[[ind]]$Y,na.rm=T)\n      }\n    }\n  }\n       # fill in augmented individuals with truly random points\n  isna <- which(is.na(caplocsx4d[i,,,]),arr.ind = TRUE)\n  nna <- nrow(isna)\n  randpoints <- spsample(newpolygon,nna,type=\"random\")\n  randx <- randpoints@coords[,1]\n  randy <- randpoints@coords[,2]\n  caplocsx4d.init[i,,,][isna] <- randx\n  caplocsy4d.init[i,,,][isna] <- randy\n  \n}\n\ninit.location.x[1,]\ninit.location.y[1,]\n\ncaplocsx4d.init[1,,1,]\ncaplocsx4d[1,,1,]\n\n\nsite=1\nhabrast <- raster(site_data[[site]]$habmat[1:site_data[[site]]$ylim2[2],1:site_data[[site]]$xlim2[2]],xmn=site_data[[site]]$xlim[1],xmx=site_data[[site]]$xlim[2],ymn=site_data[[site]]$ylim[1],ymx=site_data[[site]]$ylim[2])\nplot(habrast)\nres(habrast)\n# points(init.location.x[site,],site_data[[site]]$ylim[2]-init.location.y[site,],pch=20)\n# points(init.location.x[site,1:length(site_data[[site]]$uniqueinds)],init.location.y[site,1:length(site_data[[site]]$uniqueinds)],col=\"red\",pch=1)\n\n\n\n#### convert to \"habmat\" scale\n\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  caplocsx4d[i,,,] <- ((caplocsx4d[i,,,]-site_data[[site]]$xlim[1]) /  diff(site_data[[site]]$xlim)) * site_data[[site]]$xlim2[2]\n  caplocsy4d[i,,,] <- ((site_data[[site]]$ylim[2]-caplocsy4d[i,,,]) /  diff(site_data[[site]]$ylim)) * site_data[[site]]$ylim2[2]\n  init.location.x[i,] <- ((init.location.x[i,]-site_data[[site]]$xlim[1]) /  diff(site_data[[site]]$xlim)) * site_data[[site]]$xlim2[2]\n  init.location.y[i,] <- ((site_data[[site]]$ylim[2]-init.location.y[i,]) /  diff(site_data[[site]]$ylim)) * site_data[[site]]$ylim2[2]\n  caplocsx4d.init[i,,,] <- ((caplocsx4d.init[i,,,]-site_data[[site]]$xlim[1]) /  diff(site_data[[site]]$xlim)) * site_data[[site]]$xlim2[2]\n  caplocsy4d.init[i,,,] <- ((site_data[[site]]$ylim[2]-caplocsy4d.init[i,,,]) /  diff(site_data[[site]]$ylim)) * site_data[[site]]$ylim2[2]  \n}\n\n\ninitx.hr <- array(1,dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions))\ninity.hr <- array(1,dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions))\n\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  for(ind in 1:global_vars$max_naug){\n    initx.hr[i,ind,1:global_vars$n_primary_occasions] <- init.location.x[i,ind]\n    inity.hr[i,ind,1:global_vars$n_primary_occasions] <- init.location.y[i,ind]\n  }\n  \n}\n\ninitx.hr[1,,]\n\n\n## INIT INPOP\n\ninit.inpop <- array(0,dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions))\n\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  k=1\n  for(k in 1:length(site_data[[site]]$uniqueinds)){\n    firstndx <- which(site_data[[site]]$periods_surveyed==site_data[[site]]$firsts[k])\n    lastndx <- max(site_data[[site]]$ind_locs[[site_data[[site]]$uniqueinds[k]]]$periods)\n    init.inpop[i,k,firstndx:lastndx] <- 1\n  }\n  for(k in (length(site_data[[site]]$uniqueinds)+1):global_vars$naug[i]){\n    firstndx <- sample(1:(site_data[[site]]$nperiods-1),1)\n    lastndx <- sample((firstndx+1):site_data[[site]]$nperiods,1)\n    init.inpop[i,k,firstndx:lastndx] <- 1\n  }\n}\n\n\n## HABITAT MATRIX!\n\nmaxx <- max(t(sapply(1:global_vars$nsites,function(t) site_data[[t]]$xlim2[2],simplify = \"array\")))\nmaxy <- max(t(sapply(1:global_vars$nsites,function(t) site_data[[t]]$ylim2[2],simplify = \"array\")))\n\nhabmat <- array(0,dim=c(global_vars$nsites,maxy,maxx))\n\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  habmat[i,1:site_data[[site]]$ylim2[2],1:site_data[[site]]$xlim2[2]] <- site_data[[site]]$habmat\n}\n\nhabmat[1,,]\n\n\n### ensure that all observations are within the mask, at least to start (for initialization)\n\nsite=1\nhabrast <- raster(habmat[site,1:site_data[[site]]$ylim2[2],1:site_data[[site]]$xlim2[2]],xmn=site_data[[site]]$xlim2[1],xmx=site_data[[site]]$xlim2[2],ymn=site_data[[site]]$ylim2[1],ymx=site_data[[site]]$ylim2[2])\nplot(habrast)\nres(habrast)\npoints(init.location.x[site,],site_data[[site]]$ylim2[2]-init.location.y[site,],pch=20)\npoints(init.location.x[site,1:length(site_data[[site]]$uniqueinds)],site_data[[site]]$ylim2[2]-init.location.y[site,1:length(site_data[[site]]$uniqueinds)],col=\"red\",pch=1)\n\n\n## INTERVALS!\n\nintervals <- array(0,dim=c(global_vars$nsites,global_vars$n_primary_occasions))\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  j=1\n  for(j in 1:(global_vars$nperiods[i]-1)){\n    this.period <- site_data[[site]]$periods_surveyed[j]\n    next.period <- site_data[[site]]$periods_surveyed[j+1]\n    intervals[i,j] <- sum(global_vars$intervals[this.period:(next.period-1)])\n  }\n}\n\n\n## More initialization stuff:\n\ninit.z2 <- init.z\ninit.inpop.all1 <- array(1,dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions))\ninit.didmove <- array(0,dim=c(global_vars$nsites,global_vars$max_naug,global_vars$n_primary_occasions))\ninit.locationx <- caplocsx4d.init\ninit.locationy <- caplocsy4d.init\ninit.initx <- init.location.x\ninit.inity <- init.location.y\n\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  k=399\n  for(k in 1:global_vars$max_naug){\n    if(k>global_vars$naug[i]){\n      init.z2[i,k] <- NA\n      #init.didmove[i,k] <- NA\n      init.inity[i,k] <- NA\n      init.initx[i,k] <- NA\n    }\n    j=1\n    for(j in 1:global_vars$n_primary_occasions){\n      this.period <- site_data[[site]]$periods_surveyed[j]\n      if((j>site_data[[site]]$nperiods)|(k>global_vars$naug[i])){\n        init.inpop.all1[i,k,j] <- NA\n        init.inpop[i,k,j] <- NA\n        init.didmove[i,k,j] <- NA\n      }\n      l=1\n      for(l in 1:global_vars$n_secondary_occasions){\n        if((j>site_data[[site]]$nperiods)|(k>global_vars$naug[i])|(l>site_data[[site]]$replicate_sessions[this.period])){\n          init.locationy[i,k,j,l] <- NA\n          init.locationx[i,k,j,l] <- NA\n        }\n      }\n    }\n  }\n}\n\ninit.z2[1,]\ninit.didmove[1,,]\ninit.inpop[5,,10]\ninit.inpop.all1[1,,10]\ninit.locationy[9,,1,1]\ninit.initx[1,]\n\n\n###############\n# BUGS MODEL\n###############\n\nparams <- c(p0 = 0.5, sigma = 25)\nhalfnorm <- function(dist,params){\n  params['p0'] * exp(-1*(dist^2)/(2*params['sigma']^2))\n}\n\ncurve(halfnorm(x,params),0,75)  \n\n##START THE FILE FOR JAGS! build function into bugs model\n\nBUGSfilename <- \"Uta_BUGS2.txt\"\n\ncat(\"\n    \nmodel{\n\n#############\n# PRIORS\n#############\n\n  ###########\n  # PROBABILITY OF CAPTURE IN SURVEYED AREA\n  ###########\n\n  p0 ~ dunif(0,1)                 # mean/intercept detection prob\n  logit.p0 <- log(p0/(1-p0)) \n  p.male.eff ~ dunif(-3,3)    # effect of sex on mean capture probability\n  p.pm.eff ~ dunif(-2,2)    # effect of survey time on mean capture probability\n  p.effort.eff ~ dunif(-1,3)  # effect of survey effort on mean capture probability\n  p.wind.eff ~ dunif(-3,3)   # logit-linear effect of wind speed on capture probability\n    #p.recap.eff ~ dunif(-1,5)  # effect of being after the first capture in a primary occasion. \n  p.vismark.eff ~ dunif(-1,5)  # effect of being permanently marked\n  \n  #### add random effect for period to soak up any additional variance in capture probability from session to session...\n\n  # #### determine whether or not individual has been bead tagged...\n  for(site in 1:nsites){\n    for(ind in 1:ninds[site]){  # loop through (data augmented) individuals\n      is.beadmarked[site,ind,1] <- 0    # no one is beadmarked in the first four time steps\n      is.beadmarked[site,ind,2] <- 0\n      is.beadmarked[site,ind,3] <- 0\n      is.beadmarked[site,ind,4] <- 0\n      for(period in 5:nperiods[site]){\n        is.beadmarked[site,ind,period] <- step(captured_this_period[site,ind,(period-1)] + is.beadmarked[site, ind, (period-1)]-1)   # was it captured any time after the fourth period?\n      }\n    }\n  }\n\n\n    #### mean capture probability\n  for(site in 1:nsites){\n    for(ind in 1:ninds[site]){  # loop through (data augmented) individuals\n      for(period in 1:nperiods[site]){\n        for(session in 1:nsessions[site,period]){\n          is.prevcapped[site,ind,period,session] <- step(session-firstsession[site,ind,period]-1)  # after the first capture in a given session, this should be 1 for each period\n          is.vismarked[site,ind,period,session] <- step(is.beadmarked[site,ind,period]+is.prevcapped[site,ind,period,session]-1)  # does it have a visual mark (so it can be re-sighted)\n          logit(thisp0[site,ind,period,session]) <- logit.p0 + p.male.eff*is.male[site,ind] + p.wind.eff*wind[site,period,session] +\n                                                    p.effort.eff*effort[site,period,session] + p.pm.eff*is.pm[site,period,session]  +    #p.recap.eff*is.prevcapped[site,ind,period,session] +     # p.time.eff*(period-1) + \n                                                    p.vismark.eff*is.vismarked[site,ind,period,session] #+\n                                                    \n        }\n      }\n    }\n  }\n\n  # test.vismarked1 <- is.vismarked[1,2,3,1]   # should be 0\n  # test.vismarked2 <- is.vismarked[1,2,4,1]   # should be 0\n  # test.vismarked3 <- is.vismarked[1,2,4,2]   # should be 1\n  # test.vismarked4 <- is.vismarked[1,2,5,1]   # should be 1\n\n\n    \n  ###########\n  # PROBABILITY OF SURVIVING\n  ###########\n    \n  phi0 ~ dunif(0.1,1)                 # mean/intercept survival (monthly)\n  phi0.logit <- log(phi0/(1-phi0)) \n\n  phi.site.prec ~ dgamma(0.01,0.01)               # let mean survival differ by site\n  phi.site.sd <- pow((1/phi.site.prec),0.5)\n  for(site in 1:nsites){\n    phi.site.eff[site] ~ dnorm(0,phi.site.prec)\n  }\n\n  for(site in 1:nsites){\n    logit(phi[site]) <- phi0.logit + phi.site.eff[site] \n  }\n\n  ###########\n  # PROBABILITY OF RECRUITMENT\n  ###########\n\n  # Dirichlet prior for entrance probabilities (following Royle's S-A formulation)\n  for(site in 1:nsites){\n      init.entranceprob[site] ~ dgamma(5,1)       # ~ dunif(0.05,0.75)    #first entrance probability is fundamentally different from the others   # probability of entering the population at time 1 is estimated separately (I don't think it should be fixed... )\n      beta[site,1] <- init.entranceprob[site]\n      gamma[site,1] <- beta[site,1]/sum(beta[site,1:nperiods[site]])   # init.entranceprob[site]      #\n    for(period in 2:nperiods[site]){\n      beta[site,period] ~ dgamma(interval[site,(period-1)],4)    # <- interval[site,(period-1)]   #close to equal probability of entrance each occasion\n      gamma[site,period] <- beta[site,period]/sum(beta[site,1:nperiods[site]])    # (interval[site,(period-1)]/sum(interval[site,1:(nperiods[site]-1)]))*(1-init.entranceprob[site])    # probability of entrance...\n    }\n  }\n  \n  # convert to conditional entrance probs\n\n  for(site in 1:nsites){  \n    cprob[site,1]<-gamma[site,1]\n    for(period in 2:nperiods[site]){\n      cprob[site,period]<-gamma[site,period]/(1-sum(gamma[site,1:(period-1)]))\n    }\n  }\n\n  ###########\n  # PROBABILITY OF BEING REAL\n  ###########\n\n  # psi0 ~ dunif(0,1)                # probability of being real- related to real densities\n  # psi0_logit <- log(psi0/(1-psi0))\n  # psi.windfarm.eff ~ dunif(-3,3)\n  # psi.disturb.eff ~ dunif(-3,3)\n\n  for(site in 1:nsites){\n    psi[site] ~ dunif(0,1)      # estimate separately for every site? Alternatively, make it a function of disturbance level?  If it is on the same terms, then augmentation should be based on size\n  }\n\n\n  ###########\n  # MOVEMENT PROCESS\n  ###########\n\n    ###########\n    # SIZE OF ACTIVITY AREA (log scale)\n    ###########\n    \n    \n  # let mean activity area size differ by site\n  for(site in 1:nsites){\n    hr.site.log[site] ~ dunif(0,3)   # log scale... \n  }\n  \n  for(sex in 1:2){                \n    hr.sex.eff[sex] ~ dunif(-1,1)   # effect of sex on size of activity area \n  }  \n  \n  for(site in 1:nsites){\n    for(sex in 1:2){                # size of activity area- related to home range size, sex dependent\n      log(sigma[site,sex]) <- hr.site.log[site] + hr.sex.eff[sex] \n      tau[site,sex] <- 1/pow(sigma[site,sex],2)\n    }\n  }\n    \n    ###########\n    # SHIFT IN ACTIVITY AREA CENTER AMONG PERIODS\n    ###########\n\n  probmove0 ~ dunif(0,0.25)                # probability of moving per month\n  probmove0_logit <- log(probmove0/(1-probmove0))\n  m.male.eff ~ dunif(-3,3)\n\n  m.site.prec ~ dgamma(1,1)               # let mean movement rate differ by site\n  m.site.sd <- pow((1/m.site.prec),0.5)\n  for(site in 1:nsites){\n    m.site.eff[site] ~ dnorm(0,m.site.prec)\n  }\n\n    #m.disturb.eff ~ dunif(-3,3)\n    \n  for(site in 1:nsites){\n    for(ind in 1:ninds[site]){\n      logit(prob.move[site,ind]) <- probmove0_logit + m.site.eff[site] + m.male.eff*is.male[site,ind]       #m.windfarm.eff * is.windfarm[site]   # + psi.disturb.eff * disturbance[site] \n    }\n  }\n\n  for(site in 1:nsites){\n    logit(prob.move_bysite[site,1]) <- probmove0_logit + m.site.eff[site] + m.male.eff     # assume males arbitrarily...\n    logit(prob.move_bysite[site,2]) <- probmove0_logit + m.site.eff[site]      # (females)\n  }\n\n  for(site in 1:nsites){\n    for(ind in 1:ninds[site]){\n      initx[site,ind]  ~ dunif(xlim[site,1], xlim[site,2])   # specify location of center of activity at start of study    # provide inits? \n      inity[site,ind]  ~ dunif(ylim[site,1], ylim[site,2])\n      hrx[site,ind,1] <- initx[site,ind] \n      hry[site,ind,1] <- inity[site,ind]\n      did.move[site,ind,1] ~ dbern(0)     # can't move in the first \n      for(period in 2:nperiods[site]){\n        probmove2[site,ind,period] <- (1-pow((1-prob.move[site,ind]),interval[site,(period-1)])) * in.pop.now[site,ind,(period-1)]\n        did.move[site,ind,period] ~ dbern(probmove2[site,ind,period])     \n        move.dist[site,ind,period] ~ dunif(4,20)        # movement distance\n        move.dir[site,ind,period] ~ dunif(0,6.283185)    # movement direction\n        hrx[site,ind,period] <- (1-did.move[site,ind,period])*hrx[site,ind,(period-1)]  + did.move[site,ind,period]*max(xlim[site,1],min(xlim[site,2],hrx[site,ind,(period-1)] + move.dist[site,ind,period] * cos(move.dir[site,ind,period])))\n        hry[site,ind,period] <- (1-did.move[site,ind,period])*hry[site,ind,(period-1)]  + did.move[site,ind,period]*max(ylim[site,1],min(ylim[site,2],hry[site,ind,(period-1)] + move.dist[site,ind,period] * sin(move.dir[site,ind,period])))\n      }\n    }\n    for(ind in (ninds[site]+1):maxinds){\n      initx[site,ind]  <- 0   #~ dunif(xlim[site,1], xlim[site,2])   # for initialization purposes\n      inity[site,ind]  <- 0   #  ~ dunif(ylim[site,1], ylim[site,2])\n    }\n  }\n\n\n    ###########\n    # SHIFT IN LOCATION AMONG SUBOCCASIONS WITHIN A PERIOD\n    ###########\n\n  #delta <- 10  \n\n  for(site in 1:nsites){\n    for(ind in 1:ninds[site]){  # loop through augmented individuals\n      for(period in 1:nperiods[site]){\n        for(session in 1:nsessions[site,period]){\n          locationx[site,ind,period,session] ~ dnorm(hrx[site,ind,period],tau[site,thissex[site,ind]]) #I(xlim[site,1], xlim[site,2])    # data node    # note that the I() construct works for WinBUGS but not JAGS here\n          locationy[site,ind,period,session] ~ dnorm(hry[site,ind,period],tau[site,thissex[site,ind]]) #I(ylim[site,1], ylim[site,2]) \n          xndx[site,ind,period,session] <- max(1,min(xlim[site,2],trunc(locationx[site,ind,period,session]+1)))    # max(1,min(xlim[site,2], ))\n          yndx[site,ind,period,session] <- max(1,min(ylim[site,2],trunc(locationy[site,ind,period,session]+1)))\n          inplot[site,ind,period,session] <- habmat[site, yndx[site,ind,period,session], xndx[site,ind,period,session]]  #~ dbern(     # habitat check, this line was added to see if individuals are located within the sampled habitat\n        }\n        for(session in (nsessions[site,period]+1):3){    # for initialization purposes...\n          locationx[site,ind,period,session]  <- 0   # ~ dnorm(hrx[site,ind,period],tau[site,thissex[site,ind]]) #I(xlim[site,1], xlim[site,2])    # data node    # note that the I() construct works for WinBUGS but not JAGS here\n          locationy[site,ind,period,session]  <- 0   # ~ dnorm(hry[site,ind,period],tau[site,thissex[site,ind]])\n        }\n      }\n      for(period in (nperiods[site]+1):10){   # for initialization purposes\n        for(session in 1:3){\n          locationx[site,ind,period,session]  <- 0   # ~ dnorm(hrx[site,ind,1],tau[site,1])    # data node    # note that the I() construct works for WinBUGS but not JAGS here\n          locationy[site,ind,period,session]   <- 0   #~ dnorm(hry[site,ind,1],tau[site,1])\n        }\n      }\n    }\n    for(ind in (ninds[site]+1):maxinds){\n      for(period in 1:10){\n        for(session in 1:3){\n          locationx[site,ind,period,session]  <- 0   # ~ dnorm(hrx[site,1,1],tau[site,1])    # for initialization\n          locationy[site,ind,period,session]  <- 0   # ~ dnorm(hry[site,1,1],tau[site,1])\n        }\n      }\n    }\n  }\n  \n#############\n# DEAL WITH MISSING DATA\n#############\n\n  for(site in 1:nsites){\n    prob.male[site] ~ dunif(0,1)    # allow to vary by site?\n  }\n    \n  prob.pm ~ dunif(0,1)\n    \n  for(site in 1:nsites){\n    for(ind in 1:maxinds){\n      is.male[site,ind] ~ dbern(prob.male[site])\n    }\n  }\n\n  for(site in 1:nsites){\n    for(period in 1:nperiods[site]){\n      for(session in 1:nsessions[site,period]){\n       is.pm[site,period,session] ~ dbern(prob.pm)\n      }\n    }\n  }\n\n\n#############\n# LIKELIHOOD\n#############\n\n  for(site in 1:nsites){\n    for(ind in 1:ninds[site]){  # loop through augmented individuals\n      thissex[site,ind] <- 2-is.male[site,ind]   # male is 1, female is 2\n      z[site,ind] ~ dbern(psi[site])    # is this individual real or fake? (data augmentation)\n      in.pop.now[site,ind,1] ~ dbern(gamma[site,1])   # initial entrance probability\n\n      for(session in 1:nsessions[site,1]){\n        p[site,ind,1,session] <- thisp0[site,ind,1,session] * z[site,ind] * in.pop.now[site,ind,1] * inplot[site,ind,1,session]    #probability of catching an individual at a given point given it is in the population, in the study area, and real\n        y[site,ind,1,session] ~ dbern(p[site,ind,1,session])\n      }\n      \n      recruitable[site,ind,1] <- 1-in.pop.now[site,ind,1]     # 1 if the indiv is not yet in the population \n      recruited[site,ind,1] <- in.pop.now[site,ind,1]\n\n      for(period in 2:nperiods[site]){\n        survival.part[site,ind,period] <- pow(phi[site],interval[site,(period-1)]) * in.pop.now[site,ind,(period-1)]\n        recruitment.part[site,ind,period] <- cprob[site,period]*recruitable[site,ind,(period-1)]\n        expected.inpop[site,ind,period] <- survival.part[site,ind,period] + recruitment.part[site,ind,period]  # either it is still in the pop or it just entered\n        in.pop.now[site,ind,period] ~ dbern(expected.inpop[site,ind,period])\n        recruitable[site,ind,period] <- recruitable[site,ind,(period-1)] * (1-in.pop.now[site,ind,period])       # is it still not yet in the study population?\n        recruited[site,ind,period] <- (1-in.pop.now[site,ind,(period-1)]) * in.pop.now[site,ind,period]   # was it recruited this year?\n        \n        for(session in 1:nsessions[site,period]){\n          p[site,ind,period,session] <- thisp0[site,ind,period,session] * z[site,ind] * in.pop.now[site,ind,period] * inplot[site,ind,period,session]   #probability of catching an individual at a given point given it is in the population, in the study area, and real\n          y[site,ind,period,session] ~ dbern(p[site,ind,period,session])                           \n        }\n        captured_this_period[site,ind,period] <- step(sum(y[site,ind,period,1:nsessions[site,period]])-1)  # was it captured at least once?\n      }    \n    }\n  }\n\n\n  for(site in 1:nsites){\n    for(ind in 1:ninds[site]){  # loop through augmented individuals\n      for(period in (nperiods[site]+1):10){\n        in.pop.now[site,ind,period]  <- 0   # ~ dbern(0)\n        did.move[site,ind,period]  <- 0   # ~ dbern(0)\n      }\n    }\n    for(ind in (ninds[site]+1):maxinds){  # loop through augmented individuals\n      z[site,ind]  <- 0   # ~ dbern(0)\n      for(period in 1:10){\n        in.pop.now[site,ind,period]  <- 0   # ~ dbern(0)\n        did.move[site,ind,period]  <- 0   # ~ dbern(0)\n      }\n    }\n  }\n\n\n#############\n# DERIVED TERMS\n#############\n\n  for(site in 1:nsites){\n    for(period in 1:nperiods[site]){\n      N[site,period] <- inprod(in.pop.now[site,1:ninds[site],period],z[site,1:ninds[site]])\n      N.recruited[site,period] <- inprod(recruited[site,1:ninds[site],period],z[site,1:ninds[site]])\n      Density[site,period] <- N[site,period]/A[site]       #derive density\n    }\n  }\n\n\n}   ## end BUGS model\n    \n\",file=BUGSfilename)\n\n\n\n###############\n# SET UP WORKSPACE FOR BUGS\n###############\n\n\n# get areas\n\nfirst.site <- 1 # 3 # \nlast.site <-  global_vars$nsites # 4 # 3 # \nfirst.period <- 1\nlast.period <- 10 # 1 # \n\nnsites <- 1+last.site-first.site   #global_vars$nsites\nnperiods <- pmin(global_vars$nperiods[first.site:last.site,drop=FALSE],rep(1+last.period-first.period,times=nsites))\nmaxperiods <- max(nperiods)\nmaxinds <- max(global_vars$naug[first.site:last.site,drop=FALSE])\n\ndata.for.bugs <- list(\n  A=sapply(first.site:last.site,function(t) site_data[[t]]$area2,simplify = \"array\"), \n  y=caphist4d[first.site:last.site,1:maxinds,first.period:last.period,,drop=FALSE],\n  locationx=caplocsx4d[first.site:last.site,1:maxinds,,,drop=FALSE],           # first.period:last.period\n  locationy=caplocsy4d[first.site:last.site,1:maxinds,,,drop=FALSE],            # first.period:last.period\n  ninds=global_vars$naug[first.site:last.site,drop=FALSE],\n  maxinds=maxinds,\n  habmat = habmat[first.site:last.site,,,drop=FALSE],\n  xlim=t(sapply(first.site:last.site,function(t) site_data[[t]]$xlim2,simplify = \"array\")), \n  ylim=t(sapply(first.site:last.site,function(t) site_data[[t]]$ylim2,simplify = \"array\")), \n  is.male = is.male[first.site:last.site,1:maxinds,drop=FALSE],\n  is.pm = is.pm[first.site:last.site,first.period:last.period,,drop=FALSE],\n  effort = effort[first.site:last.site,first.period:last.period,,drop=FALSE],\n  wind = wind[first.site:last.site,first.period:last.period,,drop=FALSE],\n  nperiods = nperiods,\n # maxperiods = maxperiods,\n  nsites = nsites,\n  nsessions = sessions.surveyed[first.site:last.site,first.period:last.period,drop=FALSE],\n  firstsession = firstsession[first.site:last.site,,first.period:last.period,drop=FALSE],\n  #is.beadmarked = is.beadmarked[first.site:last.site,,first.period:last.period,drop=FALSE],\n  interval=intervals[first.site:last.site,first.period:last.period,drop=FALSE]\n  #is.windfarm = site_covariates$windpower,\n  #initx = init.location.x[first.site:last.site,,drop=FALSE],\n  #inity = init.location.y[first.site:last.site,,drop=FALSE]\n)\n\ninitz.bugs<-function(){\n  list(\n       z=init.z2[first.site:last.site,1:maxinds,drop=FALSE],  #array(1,dim=c(nsites,global_vars$naug)),    #\n       #psi=runif(nsites,0.4,0.5),\n       p0=runif(1,0.1,0.15),\n       p.male.eff=runif(1,-0.01,0.01),\n       p.wind.eff=runif(1,-0.01,0.01),\n       p.pm.eff=runif(1,-0.01,0.01),\n       p.effort.eff=runif(1,0.01,0.05),\n       #p.period.prec=runif(1,100,101),\n       p.vismark.eff=runif(1,1,2),\n       \n       phi0=runif(1,0.6,0.75),\n       phi.site.prec=20,\n       phi.site.eff=runif(nsites,-1,1),\n       \n       #beta = runif(10,0.4,1),\n       \n       psi = runif(nsites,0.5,0.6),\n       init.entranceprob = runif(nsites,3,4),\n       \n       hr.site.log=runif(nsites,1.5,2),\n       hr.sex.eff=runif(2,-0.1,0.1),\n       # sigma=runif(2,10,15),\n       \n       in.pop.now=init.inpop.all1[first.site:last.site,1:maxinds,,drop=FALSE],  #init.inpop[first.site:last.site,1:maxinds,,drop=FALSE],  #   array(1,dim=c(nsites,maxinds,10)), #  initialize every indiv as being in the population?  ,  #  \n       did.move=init.didmove[first.site:last.site,1:maxinds,,drop=FALSE],  #array(0,dim=c(nsites,maxinds,10)),\n\n       probmove0 = 0.01,\n       m.site.prec=20,\n       m.male.eff = 0,\n       m.site.eff=runif(nsites,-1,1),\n       \n       locationx=init.locationx[first.site:last.site,1:maxinds,,,drop=FALSE],  #caplocsx4d.init[first.site:last.site,1:maxinds,,,drop=FALSE],      #first.period:last.period\n       locationy=init.locationy[first.site:last.site,1:maxinds,,,drop=FALSE],  #caplocsy4d.init[first.site:last.site,1:maxinds,,,drop=FALSE],      #first.period:last.period\n       \n       initx = init.initx[first.site:last.site,1:maxinds,drop=FALSE], #init.location.x[first.site:last.site,1:maxinds,drop=FALSE],\n       inity = init.inity[first.site:last.site,1:maxinds,drop=FALSE],  #init.location.y[first.site:last.site,1:maxinds,drop=FALSE],\n       \n       prob.male = rep(.5,times=nsites)\n       #psi.windfarm.eff = 0,\n       \n       #m.windfarm.eff = 0,\n      \n       # init.location.x and init.location.y?\n  )\n}\n#initz.bugs()\n\n\nsystem.time(\n  mod<-run.jags(\n    model=BUGSfilename,\n    monitor=c(\"p0\",\"p.male.eff\",\"p.vismark.eff\",\"p.wind.eff\",\"p.pm.eff\",\"prob.male\",\"p.effort.eff\",   #\"p.recap.eff\",\n                         \"prob.move_bysite\",\"m.male.eff\",\"m.site.sd\",\"probmove0\",\"sigma\",\"hr.site.log\",\"hr.sex.eff\",   # \"p.period.sd\",\"p.period.eff\",\n                         \"phi0\",\"phi.site.sd\",\"phi\",\n                         \"psi\",\"Density\",\"N\",\n                         \"gamma\",\"N.recruited\",\"init.entranceprob\"),\n    data=data.for.bugs,\n    n.chains = 3,\n    inits=initz.bugs,\n    burnin = 10000,\n    #\"test.vismarked1\",\"test.vismarked2\",\"test.vismarked3\",\"test.vismarked4\"),    # \"p.time.eff\",\"psi0\" ,\"prob.move\",\"m.windfarm.eff\",\"phi.windfarm.eff\",\"psi.windfarm.eff\",\n    sample=10000,\n    adapt=1000,\n    thin=10,\n    method=\"parallel\"\n    #clearWD=FALSE\n  )\n)\n\n# system.time(\n#   mod<-jags(\n#     data=data.for.bugs,\n#     inits=initz.bugs,\n#     parameters.to.save=c(\"p0\",\"p.male.eff\",\"p.vismark.eff\",\"p.wind.eff\",\"p.pm.eff\",\"prob.male\",\"p.effort.eff\",   #\"p.recap.eff\",\n#                          \"prob.move_bysite\",\"m.male.eff\",\"m.site.sd\",\"probmove0\",\"sigma\",\"hr.site.log\",\"hr.sex.eff\",   # \"p.period.sd\",\"p.period.eff\",\n#                          \"phi0\",\"phi.site.sd\",\"phi\",\n#                          \"psi\",\"Density\",\"N\",\n#                          \"gamma\",\"N.recruited\",\"init.entranceprob\"),\n#                          #\"test.vismarked1\",\"test.vismarked2\",\"test.vismarked3\",\"test.vismarked4\"),    # \"p.time.eff\",\"psi0\" ,\"prob.move\",\"m.windfarm.eff\",\"phi.windfarm.eff\",\"psi.windfarm.eff\",\n#     n.iter=5000,\n#     model.file=BUGSfilename, \n#     n.chains = 2,\n#     n.burnin = 2000,\n#     n.thin=3\n#     #clearWD=FALSE\n#   )\n# )\n\n##### DEBUG\n\n# site=1\n# ind=30\n# perndx=9    # [1,30,9]\n# period=site_data[[site]]$periods_surveyed[perndx]\n# rep=1\n# habrast <- raster(habmat[site,1:site_data[[site]]$ylim2[2],1:site_data[[site]]$xlim2[2]],xmn=site_data[[site]]$xlim2[1],xmx=site_data[[site]]$xlim2[2],ymn=site_data[[site]]$ylim2[1],ymx=site_data[[site]]$ylim2[2])\n# plot(habrast)\n# res(habrast)\n# site_data[[site]]$caphist.std.2d\n# site_data[[site]]$ind_locs[[site_data[[site]]$uniqueinds[ind]]]\n# caphist4d[site,ind,perndx,]\n# caplocsy4d[site,ind,perndx,]\n# points(caplocsx4d[site,ind,perndx,rep],site_data[[site]]$ylim2[2]-caplocsy4d[site,ind,perndx,rep],col=\"red\",pch=20)\n# points(caplocsx4d.init[site,ind,period,],site_data[[site]]$ylim2[2]-caplocsy4d.init[site,ind,period,],col=\"blue\",pch=1)\n# points(init.location.x[site,ind],site_data[[site]]$ylim2[2]-init.location.y[site,ind],pch=20)\n# \n# xdx <- trunc(caplocsx4d[site,ind,perndx,rep]+1)\n# ydx <- trunc(caplocsy4d[site,ind,perndx,rep]+1)\n# habmat[site,ydx,xdx]        # node inconsistent with parents!!\n# \n# points(xdx,ydx)\n\n\n# winbugs.location <- \"C:\\\\WinBUGS\\\\winbugs14\\\\WinBUGS14\"\n#\n# library(R2WinBUGS)\n# mod<-bugs(\n#   data=data.for.bugs,\n#   inits=initz.bugs,\n#   parameters.to.save=c(\"p0\",\"p.male.eff\",\"p.vismark.eff\",\"p.wind.eff\",\"p.pm.eff\",\"prob.male\",\"p.effort.eff\",   #\"p.recap.eff\",\n#                        \"prob.move_bysite\",\"m.male.eff\",\"m.site.sd\",\"probmove0\",\"sigma\",\"hr.site.log\",\"hr.sex.eff\",   # \"p.period.sd\",\"p.period.eff\",\n#                        \"phi0\",\"phi.site.sd\",\"phi\",\n#                        \"psi\",\"Density\",\"N\",\n#                        \"gamma\",\"N.recruited\"),    # \"p.time.eff\",\"psi0\" ,\"prob.move\",\"m.windfarm.eff\",\"phi.windfarm.eff\",\"psi.windfarm.eff\",\n#   n.iter=1200,\n#   model.file=BUGSfilename,\n#   n.chains = 1,\n#   n.burnin = 500,\n#   n.thin=1,\n#   bugs.directory = winbugs.location,\n#   debug=TRUE\n#   #clearWD=FALSE\n# )\n\n### Save results to disk\n\nfilename <- \"bugsresults_ALLSITES_PRELIM11.RData\"\n\nsave(list = ls(all.names = TRUE), file = filename, envir = .GlobalEnv)\n\n?par\n\ngraphics.off()\n\nSite_mcmc <- mod$mcmc  #as.mcmc(mod)   # does this work for \"runjags\"?\n\ncolnames(Site_mcmc[[1]])\n\nplot(Site_mcmc[,\"psi[1]\"])\nplot(Site_mcmc[,\"psi[2]\"])\nplot(Site_mcmc[,\"psi[3]\"])\n\nplot(Site_mcmc[,\"init.entranceprob[1]\"])\nplot(Site_mcmc[,\"p0\"])\nplot(Site_mcmc[,\"p.male.eff\"])\nplot(Site_mcmc[,\"p.wind.eff\"])\nplot(Site_mcmc[,\"p.pm.eff\"])\nplot(Site_mcmc[,\"p.effort.eff\"])\nplot(Site_mcmc[,\"p.vismark.eff\"])\n\n#plot(Site_mcmc[,\"p.period.sd\"])\n#plot(Site_mcmc[,\"p.period.eff[1]\"])\n\nplot(Site_mcmc[,\"phi0\"])\nplot(Site_mcmc[,\"phi.site.sd\"])\nplot(Site_mcmc[,\"phi[2]\"])\n\nplot(Site_mcmc[,\"gamma[2,3]\"])\n\nplot(Site_mcmc[,\"probmove0\"])\nplot(Site_mcmc[,\"m.male.eff\"])\nplot(Site_mcmc[,\"prob.move_bysite[1,2]\"])\nplot(Site_mcmc[,\"sigma[1,1]\"])\nplot(Site_mcmc[,\"sigma[2,1]\"])\n\n\nplot(Site_mcmc[,\"Density[1,1]\"])\nplot(Site_mcmc[,\"N[1,1]\"])\nplot(Site_mcmc[,\"N[2,1]\"])\nplot(Site_mcmc[,\"prob.male[1]\"])\n\n\n# Site_mcmc[,\"test.vismarked1\"]\n# Site_mcmc[,\"test.vismarked2\"]\n# Site_mcmc[,\"test.vismarked3\"]\n# Site_mcmc[,\"test.vismarked4\"]\n\n\n######\n  ## store site-level response variables    [missing: J:A ratio?]\n\n\nsiteanalysis_df <- sitecovars_df\n\nsiteanalysis_df$survival <- NA \nsiteanalysis_df$recruitment <- NA     # simply per-capita?\nsiteanalysis_df$sexratio <- NA\nsiteanalysis_df$meandens <- NA\nsiteanalysis_df$trenddens <- NA\nsiteanalysis_df$movedist <- NA\nsiteanalysis_df$moveprob <- NA\n\n\n  ## determine order for presenting sites:\nnewsiteorder <- siteanalysis_df[order(siteanalysis_df$disturbance_rank,decreasing=T),]$newnames\n\nneworder <- match(newsiteorder,siteanalysis_df$newnames)\n\n\n#######\n# PLOT DENSITY ETC\n######\n\nfilename = sprintf(\"densities.pdf\")\npdf(filename,6,6)\npar(mfrow=c(3,3))\npar(mai=c(0.4,0.4,0.1,0.1))\n\ndensresults <- list()\n\nsite=1\nvarnames <- colnames(Site_mcmc[[1]])\nfor(site in neworder){    # 1:global_vars$nsites\n  sitename <- sitenames_df$newnames[site]\n  #filename = sprintf(\"density_%s.pdf\",sitename)\n  periods <- site_data[[site]]$periods_surveyed\n  nperiods <- site_data[[site]]$nperiods\n  #pdf(filename,4,4)\n  \n  tomatch <- sprintf(\"Density[%i,%i]\",site,1:nperiods)\n  \n  thissitedata <- Site_mcmc[[1]][,tomatch]\n  \n  densresults[[sitename]] <- thissitedata\n  \n  upperlower <- apply(thissitedata,2,function(t) stats::quantile(t,c(0.025,0.975)))*10000\n  mean <- apply(thissitedata,2,mean)*10000\n  \n  errbar(x=global_vars$realdates[periods],y=mean,yplus=upperlower[2,],yminus=upperlower[1,],\n         main=sitename,ylab=\"\",xlab=\"\",\n         ylim=c(0,140),xlim=c(global_vars$firstdate,global_vars$firstdate+days(cumsum(trunc(global_vars$intervals*30))[9]))) #,xaxt=\"n\")\n  #axis(1,at=c(1:global_vars$n_primary_occasions),labels = c(1:global_vars$n_primary_occasions))\n  legend(\"topleft\",cex=1.2,legend=sitename,bg=\"grey\")\n  #title(main=sitename)\n    \n  #dev.off()\n  \n  siteanalysis_df$meandens[site] <- mean(mean)\n  dayssince <- as.numeric(global_vars$realdates[periods]-global_vars$firstdate)\n  trendmod <- lm(mean~dayssince)\n  siteanalysis_df$trenddens[site] <- trendmod$coefficients[2]\n  temp2 <- data.frame(dayssince=seq(0,max(dayssince),5))\n  temp <- predict(trendmod,newdata=temp2,interval = c(\"confidence\"),level=0.95)\n  lines(global_vars$firstdate + days(temp2[,1]),temp[,1],col=\"gray\",lty=1,lwd=2)\n  lines(global_vars$firstdate + days(temp2[,1]),temp[,2],col=\"gray\",lty=2)\n  lines(global_vars$firstdate + days(temp2[,1]),temp[,3],col=\"gray\",lty=2)\n}\n\ndev.off()\n\n\n#######\n# PLOT SEX RATIO\n######\n\ngraphics.off()\n\nvarnames <- colnames(Site_mcmc[[1]])\nfilename = sprintf(\"sexratio.pdf\",sitename)\npdf(filename,5,3.5)\n\nquants <- data.frame(mean=numeric(global_vars$nsites),lower=0,upper=0)\nsite=1\nfor(site in neworder){  # 1:global_vars$nsites\n  sitename <- sitenames_df$newnames[site]\n  tomatch <- sprintf(\"prob.male[%i]\",site)\n  thissitedata <- Site_mcmc[[1]][,tomatch]\n  \n  quants$mean[site] <- mean(thissitedata)\n  quants[site,c(2,3)] <- quantile(thissitedata,c(0.025,0.975))\n  \n}\n\nerrbar(x=1:global_vars$nsites,y=quants$mean,yplus=quants$upper,yminus=quants$lower,main=\"\",ylab=\"Sex ratio\",xlab=\"Site\",xaxt=\"n\",pch=site_covariates$windpower[neworder]+1)\naxis(1,at=c(1:global_vars$nsites),labels = sitenames_df$newnames[neworder])\n\nsiteanalysis_df$sexratio <- quants$mean\n\ndev.off()\n\n\n\n\n\n#######\n# PLOT SURVIVAL\n######\n\ngraphics.off()\npar(mfrow=c(2,2))\n\nvarnames <- colnames(Site_mcmc[[1]])\n\nquants <- data.frame(mean=numeric(global_vars$nsites),lower=0,upper=0)\nsite=1\nfor(site in neworder){\n  sitename <- sitenames_df$newnames[site]\n  tomatch <- sprintf(\"phi[%i]\",site)\n  thissitedata <- Site_mcmc[[1]][,tomatch]\n  \n  quants$mean[site] <- mean(thissitedata)\n  quants[site,c(2,3)] <- quantile(thissitedata,c(0.025,0.975))\n  \n}\n\nfilename = sprintf(\"survival.pdf\",sitename)\npdf(filename,5,3.5)\nerrbar(x=1:global_vars$nsites,y=quants$mean,yplus=quants$upper,yminus=quants$lower,main=\"monthly survival\",ylab=\"Mean survival rate\",xlab=\"Site\",xaxt=\"n\",pch=site_covariates$windpower[neworder]+1)\ntitle(\"monthly survival\")\naxis(1,at=c(1:global_vars$nsites),labels = sitenames_df$newnames[neworder])\n\ndev.off()\n\nsiteanalysis_df$survival <- quants$mean\n\n\n\n#######\n# PLOT ANNUAL RECRUITMENT\n######\n\nvarnames <- colnames(Site_mcmc[[1]])\n\n\nquants <- data.frame(mean=numeric(global_vars$nsites),lower=0,upper=0)\nquants2 <- data.frame(mean=numeric(global_vars$nsites),lower=0,upper=0)\nsite=1\nfor(site in neworder){\n  sitename <- sitenames_df$newnames[site]\n  periods <- site_data[[site]]$nperiods\n  tomatch <- sprintf(\"N.recruited[%i,%i]\",site,2:periods)\n    # tomatch2 <- sprintf(\"N[%i,%i]\",site,1:periods)   # recruited per adult or per area?\n  thisrecruited <- Site_mcmc[[1]][,tomatch]\n  thisrecruited_area <- thisrecruited / (site_data[[site]]$area2/10000)\n  thisrecruited_percap <- thisrecruited / (densresults[[sitename]][,-1]*site_data[[site]]$area2)  # per-capita recruitment\n  \n  thissitedata <- apply(as.matrix(thisrecruited_area),1,mean)\n  quants$mean[site] <- mean(thissitedata)\n  quants[site,c(2,3)] <- quantile(thissitedata,c(0.025,0.975))\n  \n  thissitedata2 <- apply(as.matrix(thisrecruited_percap),1,mean)\n  quants2$mean[site] <- mean(thissitedata2)\n  quants2[site,c(2,3)] <- quantile(thissitedata2,c(0.025,0.975))\n}\n\nfilename = sprintf(\"Recruitment_perha.pdf\",sitename)\npdf(filename,5,3.5)\nerrbar(x=1:global_vars$nsites,y=quants$mean,yplus=quants$upper,yminus=quants$lower,main=\"\",ylab=\"Mean recruitment per ha\",xlab=\"Site\",xaxt=\"n\",pch=site_covariates$windpower[neworder]+1)\n\naxis(1,at=c(1:global_vars$nsites),labels = sitenames_df$newnames[neworder])\n\ndev.off()\n\n\nfilename = sprintf(\"Recruitment_percap.pdf\",sitename)\npdf(filename,5,3.5)\nerrbar(x=1:global_vars$nsites,y=quants2$mean,yplus=quants2$upper,yminus=quants2$lower,main=\"\",ylab=\"Mean per-capita recruitment\",xlab=\"Site\",xaxt=\"n\",pch=site_covariates$windpower[neworder]+1)\ntitle(\"per-capita recruitment\")\naxis(1,at=c(1:global_vars$nsites),labels = sitenames_df$newnames[neworder])\n\ndev.off()\n\nsiteanalysis_df$recruitment <- quants2$mean\n\n#######\n# PLOT MOVEMENT RATE\n######\n\nvarnames <- colnames(Site_mcmc[[1]])\nfilename = sprintf(\"Movement.pdf\",sitename)\npdf(filename,5,3.5)\n\nquants <- data.frame(mean=numeric(global_vars$nsites),lower=0,upper=0)\nsite=1\nfor(site in neworder){\n  sitename <- sitenames_df$newnames[site]\n  tomatch <- sprintf(\"prob.move_bysite[%i,2]\",site)\n  thissitedata <- Site_mcmc[[1]][,tomatch]\n  #thissitedata <- plogis(thissitedata)\n  \n  quants$mean[site] <- mean(thissitedata)\n  quants[site,c(2,3)] <- quantile(thissitedata,c(0.025,0.975))\n  \n}\n\nerrbar(x=1:global_vars$nsites,y=quants$mean,yplus=quants$upper,yminus=quants$lower,main=\"\",ylab=\"Female movement probability\",xlab=\"Site\",xaxt=\"n\",pch=site_covariates$windpower[neworder]+1)\ntitle(\"movement probability\")\naxis(1,at=c(1:global_vars$nsites),labels = sitenames_df$newnames[neworder])\n\ndev.off()\n\nsiteanalysis_df$moveprob <- quants$mean\n\n#######\n# PLOT MOVEMENT DISTANCE\n######\n\nvarnames <- colnames(Site_mcmc[[1]])\nfilename = sprintf(\"MovementDist.pdf\",sitename)\npdf(filename,5,3.5)\n\nquants <- data.frame(mean=numeric(global_vars$nsites),lower=0,upper=0)\nsite=1\nfor(site in neworder){\n  sitename <- sitenames_df$newnames[site]\n  tomatch <- sprintf(\"sigma[%i,1]\",site)\n  thissitedata <- Site_mcmc[[1]][,tomatch]\n  \n  quants$mean[site] <- mean(thissitedata)\n  quants[site,c(2,3)] <- quantile(thissitedata,c(0.025,0.975))\n  \n}\n\nerrbar(x=1:global_vars$nsites,y=quants$mean,yplus=quants$upper,yminus=quants$lower,main=\"\",ylab=\"Male movement distance \\n(stdev from activity center)\",xlab=\"Site\",xaxt=\"n\",pch=site_covariates$windpower[neworder]+1)\ntitle(\"size of activity area\")\naxis(1,at=c(1:global_vars$nsites),labels = sitenames_df$newnames[neworder])\n\ndev.off()\n\nsiteanalysis_df$movedist <- quants$mean\n\n#####################\n# GET ADDITIONAL RESPONSE VARIABLES\n#####################\n\n##### \n#  develop body condition model\n#####\n\nconditiondf <- data.frame(\n  sex = character(0),\n  svl = numeric(0),\n  weight = numeric(0) \n)\n\nsite=2\nfor(site in 1:global_vars$nsites){\n  sitename <- sitenames_df$newnames[site] \n  tempsex <- rep(site_data[[sitename]]$sex,times=ncol(site_data[[sitename]]$svl))\n  tempsvl <- as.vector(site_data[[sitename]]$svl)\n  tempweight <- as.vector(site_data[[sitename]]$weight)\n  temp <- data.frame(\n    sex = tempsex,\n    svl = tempsvl,\n    weight = tempweight \n  )\n  conditiondf <- rbind(conditiondf,temp)\n}\n\nconditiondf <- na.omit(conditiondf)\n\nconditiondf\n\nconditiondf$male <- conditiondf$sex==\"m\"\n\nconditiondf$is.male <- ifelse(conditiondf$sex==\"m\",1,0)\n\nnrow(conditiondf)\n\n\n\nmalemodel <- loess(weight~svl, data=conditiondf[conditiondf$male,],span=1.5)\nfemalemodel <- loess(weight~svl, data=conditiondf[!conditiondf$male,],span=1.5)\n\nplot(conditiondf$weight~conditiondf$svl,pch=conditiondf$is.male+1,ylab=\"Body mass (g)\",xlab=\"SVL\")\n\nndx <- order(conditiondf$svl[conditiondf$male])\nlines(conditiondf$svl[conditiondf$male][ndx], predict(malemodel)[ndx], col = \"blue\",lwd=2)\n\nndx <- order(conditiondf$svl[!conditiondf$male])\nlines(conditiondf$svl[!conditiondf$male][ndx], predict(femalemodel)[ndx], col = \"red\",lwd=2)\n\nconditionfunc <- function(sex=thissex,svl=thissvl,weight=thisweight){\n  newdata <- na.omit(data.frame(\n    sex=sex,\n    svl=svl,\n    weight=weight,\n    stringsAsFactors = F\n  ))\n  ifelse(newdata$sex==\"m\",newdata$weight-predict(malemodel,data.frame(svl=newdata$svl)),newdata$weight-predict(femalemodel,data.frame(svl=newdata$svl)))\n}\n\n\nlnth <- global_vars$nsites   #*global_vars$n_primary_occasions\nsitedf2 <- data.frame(\n  site = character(lnth),\n  #year = numeric(lnth),\n  meansvl = numeric(lnth),\n  ageratio = numeric(lnth),\n  meancondition = numeric(lnth),\n  stringsAsFactors = F\n)\n\ncounter <- 1\nsite=4\nfor(site in 1:global_vars$nsites){\n  sitename <- sitenames_df$newnames[site] \n  thissex <- site_data[[site]]$sex\n  thisage <- as.vector(site_data[[site]]$age)\n  thissvl <- as.vector(site_data[[site]]$svl)\n  thisweight <- as.vector(site_data[[site]]$weight)\n  \n  thisratio <- length(which(thisage==\"1\")) / length(which(!is.na(thisage)))     # percent subadult\n  \n  thiscondition <- conditionfunc(rep(thissex,times=global_vars$n_primary_occasions),thissvl,thisweight)\n\n  sitedf2$site[site] <- sitename\n  sitedf2$meansvl[site] <- mean(thissvl, na.rm=T)\n  sitedf2$ageratio[site] <- thisratio \n  sitedf2$meancondition[site] <- mean(thiscondition)\n}\n\nsitedf2\n\n#####################\n# EVALUATE SITE COVARIATES\n#####################\n\nsiteanalysis_df\n\nsiteanalysis_df <- cbind(siteanalysis_df,sitedf2[,-1])\n\nresponsevars <- c(\n  \"survival\",\n  \"recruitment\",\n  \"sexratio\",\n  \"meandens\",\n  \"trenddens\",\n  \"movedist\",\n  \"moveprob\",\n  \"meansvl\",\n  \"ageratio\",\n  \"meancondition\"\n)    #names(siteanalysis_df)[15:21]\n\npredictorvars <- c(\n  \"windpower\",\n   #\"disturbance_rank\",\n  \"disturbance\",\n  \"bareground\",\n   #\"noiselevel\",\n   #\"shrubdensity\",\n   #\"shrubcanopy\",\n   #\"shrubheight\",     \n   #\"slope\",\n   #\"elevation\",\n  \"rainfall\"\n  #\"avgwind\"\n) #names(siteanalysis_df)[3:14]\n\nresponsevars\n\npredictorvars\n\npredform <- paste(predictorvars,collapse=\"+\")\n\n\n  ### correlation analysis\n\ncor(siteanalysis_df[,predictorvars][,-1])\n\n\n ### run the analysis\n\nbestmodels <- list()\n\nsiteanalysis_df$windpower <- as.factor(siteanalysis_df$windpower)\n\ntransform <- c(\"logit\",\"log\",\"logit\",\"none\",\"none\",\"none\",\"logit\",\"none\",\"none\",\"none\")   # response variable transformations\nnames(transform) <- responsevars \n\nresponse <- responsevars[9]\nfor(response in responsevars){\n  if(transform[response]%in%c(\"log\",\"logit\")){\n    respname <- sprintf(\"%s_%s\",response,transform[response])\n  }else{\n    respname <- response\n  }\n  if(transform[response]==\"logit\"){\n    siteanalysis_df[,respname] <- qlogis(siteanalysis_df[,response])\n  }\n  if(transform[response]==\"log\"){\n    siteanalysis_df[,respname] <- log(siteanalysis_df[,response])\n  }\n  formula <- as.formula(sprintf(\"%s ~ %s\",respname,predform))\n  fullmodel <- lm(formula,data=siteanalysis_df)\n    # summary(fullmodel)\n  \n  bestmodel <- step(fullmodel)\n  \n  bestmodels[[response]] <- bestmodel\n\n}\n\n\nsummary(bestmodels[[\"survival\"]])    # survival: openness, rainfall and wind are all important!\nplot(bestmodels[[\"survival\"]])\nconfint(bestmodels[[\"survival\"]])\n\nsummary(bestmodels[[\"recruitment\"]])    # recruitment: weak effect of rainfall?\nplot(bestmodels[[\"recruitment\"]])\nconfint(bestmodels[[\"recruitment\"]])\n\nsummary(bestmodels[[\"sexratio\"]])  # sex ratio: affected by disturbance, bareground, and rainfall? \nplot(bestmodels[[\"sexratio\"]])\nconfint(bestmodels[[\"sexratio\"]])\n\nsummary(bestmodels[[\"meandens\"]])  # mean density: not affected by anything... \nplot(bestmodels[[\"meandens\"]])\nconfint(bestmodels[[\"meandens\"]])\n\nsummary(bestmodels[[\"trenddens\"]])  # density trend: weakly affected by disturbance? More disturbed sites exhibited a weak decline ...\nplot(bestmodels[[\"trenddens\"]])\nconfint(bestmodels[[\"trenddens\"]])\n\nsummary(bestmodels[[\"movedist\"]])  # movement distance: stronly negatively affected by bare ground percentage\nplot(bestmodels[[\"movedist\"]])\nconfint(bestmodels[[\"movedist\"]])\n\nsummary(bestmodels[[\"moveprob\"]])  # movement probability: affected by bareground\nplot(bestmodels[[\"moveprob\"]])\nconfint(bestmodels[[\"moveprob\"]])\n\nsummary(bestmodels[[\"meansvl\"]])  # svl: affected by disturbance and rainfall\nplot(bestmodels[[\"meansvl\"]])\nconfint(bestmodels[[\"meansvl\"]])\n\nsummary(bestmodels[[\"ageratio\"]])  # age ratio: affected by disturbance\nplot(bestmodels[[\"ageratio\"]])\nconfint(bestmodels[[\"ageratio\"]])\n\nsummary(bestmodels[[\"meancondition\"]])  # body condition: affected by disturbance\nplot(bestmodels[[\"meancondition\"]])\nconfint(bestmodels[[\"meancondition\"]])\n\n######################\n# Visualize relationships\n\nresponse=\"survival\";predictor=\"windpower\"\n\nresponse=\"sexratio\";predictor=\"bareground\"\n\nvisualizeRelation <- function(response=\"survival\",predictor=\"bareground\"){\n  model <- bestmodels[[response]]\n  pred <- siteanalysis_df[,predictor]\n  otherpreds <- names(model$model)[-1][names(model$model)[-1]!=predictor]\n  fac <- ifelse(length(unique(pred))<=4,T,F)\n  if(fac){\n    span <- unique(pred)\n    newdata=data.frame(temp=numeric(length(span)))\n    newdata[,predictor] <- as.factor(span)\n    span <- as.factor(span)\n  }else{\n    span <- seq(min(pred),max(pred),length=100)\n    newdata=data.frame(temp=numeric(length(span)))\n    newdata[,predictor] <- span\n  }\n  other <- otherpreds[2]\n  for(other in otherpreds){\n    pred2 <- siteanalysis_df[,other]\n    fac2 <- ifelse(length(unique(pred2))<=4,T,F)\n    if(fac2){\n      val <- as.numeric(names(table(pred2)))[which.max(table(pred2))]\n      newdata[,other] <- factor(val,levels=names(table(pred2)))\n    }else{\n      newdata[,other] <- mean(siteanalysis_df[,other])\n    }\n  }\n  temp <- predict(model,newdata=newdata,interval = c(\"confidence\"),level=0.95)\n  if(transform[response]==\"logit\"){\n    temp <- plogis(temp)\n  }\n  if(transform[response]==\"log\"){\n    temp <- exp(temp)\n  }\n  if(!fac){\n    plot(temp[,1]~span,type=\"l\",lty=1,lwd=3,ylab=response,xlab=predictor,\n         ylim=c(min(siteanalysis_df[,response]),max(siteanalysis_df[,response])))\n    lines(span,temp[,2],lty=2,col=\"gray\",lwd=2)\n    lines(span,temp[,3],lty=2,col=\"gray\",lwd=2)\n    text(siteanalysis_df[,predictor],siteanalysis_df[,response],siteanalysis_df$newnames)\n  }else{\n    errbar(x=as.numeric(span),y=temp[,1],yplus=temp[,3],yminus=temp[,2],\n           ylab=response,xlab=predictor,xlim=c(0.75,max(as.numeric(span)+0.25)),xaxt=\"n\",pch=\"____\",cex=5)\n    axis(1,at=as.numeric(span),levels(span))\n  }\n}\n\n\ngraphics.off()\npdf(\"survcovars.pdf\",3.5,5.5)\npar(mfrow=c(3,1))\npar(mai=c(0.6,0.6,0.05,0.05))\n\nvisualizeRelation(\"survival\",\"bareground\")\n\nvisualizeRelation(\"survival\",\"windpower\")\n\nvisualizeRelation(\"survival\",\"rainfall\")\n\n # visualizeRelation(\"survival\",\"disturbance\")\ndev.off()\n\n\ngraphics.off()\npdf(\"disturbance_effects.pdf\",7,3.5)\npar(mfrow=c(2,2))\npar(mai=c(0.7,0.7,0.05,0.2))\n\n#visualizeRelation(\"recruitment\",\"rainfall\")\n # visualizeRelation(\"recruitment\",\"disturbance\")\n\n#visualizeRelation(\"sexratio\",\"disturbance\")\n\n#visualizeRelation(\"sexratio\",\"rainfall\")\n\n#visualizeRelation(\"sexratio\",\"bareground\")\n\nvisualizeRelation(\"trenddens\",\"disturbance\")\n\n#visualizeRelation(\"movedist\",\"bareground\")\n\nvisualizeRelation(\"movedist\",\"disturbance\")\n\n\n#visualizeRelation(\"moveprob\",\"bareground\")\n\n#visualizeRelation(\"meansvl\",\"disturbance\")\n\n#visualizeRelation(\"meansvl\",\"rainfall\")\n\nvisualizeRelation(\"ageratio\",\"disturbance\")\n\nvisualizeRelation(\"meancondition\",\"disturbance\")\n\ndev.off()\n\n\ngraphics.off()\npdf(\"disturbance_dens.pdf\",5,3.5)\nvisualizeRelation(\"trenddens\",\"disturbance\")\ndev.off()\n\n\n#visualizeRelation(\"movedist\",\"bareground\")\n\nvisualizeRelation(\"movedist\",\"disturbance\")\n\n\n#visualizeRelation(\"moveprob\",\"bareground\")\n\n#visualizeRelation(\"meansvl\",\"disturbance\")\n\n#visualizeRelation(\"meansvl\",\"rainfall\")\n\nvisualizeRelation(\"ageratio\",\"disturbance\")\n\nvisualizeRelation(\"meancondition\",\"disturbance\")\n\ndev.off()\n\n\n####################\n# Make parameter table\n####################\n\ncolnames(Site_mcmc[[1]])\n\n  # parameter table should have all key free parameters, with both prior and posterior indicated\n\n\nparam_table <- data.frame(parameter = character(0),prior = character(0), posterior=character(0))\n\n  # mean detection probability\n\nname <- \"p0\"\nmean <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n                     parameter=name,\n                     prior=\"Uniform(0,1)\",\n                     posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n                     ))\n\nname <- \"p.male.eff\"\nmean <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=name,\n  prior=\"Uniform(-3,3)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\nname <- \"p.pm.eff\"\nmean <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=name,\n  prior=\"Uniform(-3,3)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\nname <- \"p.effort.eff\"\nmean <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=name,\n  prior=\"Uniform(-1,3)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\n\nname <- \"p.wind.eff\"\nmean <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=name,\n  prior=\"Uniform(-3,3)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\nname <- \"p.vismark.eff\"\nmean <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=name,\n  prior=\"Uniform(-3,3)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\nname <- \"p.vismark.eff\"\nmean <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=name,\n  prior=\"Uniform(-3,3)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\n\nname <- \"phi0\"\nmean <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=name,\n  prior=\"Uniform(0,1)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\n\nname <- \"phi.site.prec\"\nname2 <- \"phi.site.sd\"\nconvert <- 1/Site_mcmc[[1]][,name2,drop=FALSE]^2\nmean <- apply(convert,2,mean)\nupper <- apply(convert,2,function(t) quantile(t,0.975))\nlower <- apply(convert,2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=name,\n  prior=\"Gamma(0.01,0.01)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\nname <- \"psi\"\nnames <- colnames(Site_mcmc[[1]])[grep(name,colnames(Site_mcmc[[1]]))]\nmean <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=names,\n  prior=\"Uniform(0,1)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\nname <- \"hr.site.log\"\nnames <- colnames(Site_mcmc[[1]])[grep(name,colnames(Site_mcmc[[1]]))]\nmean <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=names,\n  prior=\"Uniform(0,3)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\nname <- \"hr.sex.eff\"     # remember, male is 1, female is 2\nnames <- colnames(Site_mcmc[[1]])[grep(name,colnames(Site_mcmc[[1]]))]\nmean <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=names,\n  prior=\"Uniform(-1,1)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\nname <- \"probmove0\"\nmean <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=name,\n  prior=\"Uniform(0,1)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\n\nname <- \"m.male.eff\"\nmean <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,name,drop=FALSE],2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=name,\n  prior=\"Uniform(-3,3)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\n\nname <- \"m.site.prec\"\nname2 <- \"m.site.sd\"\nconvert <- 1/Site_mcmc[[1]][,name2,drop=FALSE]^2\nmean <- apply(convert,2,mean)\nupper <- apply(convert,2,function(t) quantile(t,0.975))\nlower <- apply(convert,2,function(t) quantile(t,0.025))\nparam_table <- rbind(param_table,data.frame(\n  parameter=name,\n  prior=\"Gamma(1,1)\",\n  posterior=sprintf(\"%1.2f (%1.2f to %1.2f)\",mean,lower,upper)\n))\n\n\ngetwd()\nwrite.csv(param_table,file = \"Parameter.table.csv\")\n\n\n#####################\n# Write recruitment table (table of entrance probabilities)\n#####################\n\ntemp <- matrix(\"\",nrow=9,ncol=10)\n\nsitenames <- sitenames_df$newnames\nperiodnames <- c(1:global_vars$n_primary_occasions)\n\nname <- \"gamma\"\nnames <- colnames(Site_mcmc[[1]])[grep(name,colnames(Site_mcmc[[1]]))]\nmean <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,mean)\nupper <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,function(t) quantile(t,0.975))\nlower <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,function(t) quantile(t,0.025))\n\n #Site_mcmc[[1]][,names,drop=FALSE] \n\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  ndx <- grep(sprintf(\"%i,\",i),names)\n  names[ndx]\n  temp[i,site_data[[i]]$periods_surveyed] <- sprintf(\"%1.2f (%1.2f to %1.2f)\",mean[ndx],lower[ndx],upper[ndx])\n}\n\ncolnames(temp) <- periodnames\nrownames(temp) <- sitenames\n\ngetwd()\nwrite.csv(temp,file = \"Recruitment_table.csv\",row.names = T)\n\n\n#####################\n# Write density table (table of densities)\n#####################\n\ntemp <- matrix(\"\",nrow=9,ncol=10)\n\nsitenames <- sitenames_df$newnames\nperiodnames <- c(1:global_vars$n_primary_occasions)\n\nname <- \"Density\"\nnames <- colnames(Site_mcmc[[1]])[grep(name,colnames(Site_mcmc[[1]]))]\nmean <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,mean)*10000\nupper <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,function(t) quantile(t,0.975))*10000\nlower <- apply(Site_mcmc[[1]][,names,drop=FALSE],2,function(t) quantile(t,0.025))*10000\n\n#Site_mcmc[[1]][,names,drop=FALSE] \n\ni=1\nfor(i in 1:global_vars$nsites){\n  site = sitenames_df$newnames[i]\n  ndx <- grep(sprintf(\"%i,\",i),names)\n  names[ndx]\n  temp[i,site_data[[i]]$periods_surveyed] <- sprintf(\"%1.2f (%1.2f to %1.2f)\",mean[ndx],lower[ndx],upper[ndx])\n}\n\ncolnames(temp) <- periodnames\nrownames(temp) <- sitenames\n\ngetwd()\nwrite.csv(temp,file = \"Density_table.csv\",row.names = T)\n\n\n\n############\n# MISC\n############\n\n\n\n\n\n\n",
    "created" : 1501375016276.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3872364432",
    "id" : "CF6B7C01",
    "lastKnownWriteTime" : 1499371897,
    "last_content_update" : 1499371897,
    "path" : "E:/GIT/UTA_secr/UTA_demography_superpop3_nodetectors.R",
    "project_path" : "UTA_demography_superpop3_nodetectors.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}